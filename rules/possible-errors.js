module.exports = {	rules: {		// 禁止 for 循环出现方向错误的循环，比如 for (i = 0; i < 10; i--)		'for-direction': 'error',				// getter 必须有返回值，并且禁止返回空，比如 return;		'getter-return': [			'error',			{				allowImplicit: false			}		],				// 禁止将 await 写在循环里		'no-await-in-loop': 'error',				// 禁止与负零进行比较		'no-compare-neg-zero': 'error',				// 禁止在条件语句中使用赋值语句，除非这个赋值语句被括号包起来了		'no-cond-assign': [			'error',			'except-parens'		],				// 禁止使用 console,线上不允许出现，但是开发调试console允许存在		'no-console': 'warn',				// 禁止将常量作为 if 或三元表达式的测试条件，比如 if (true), let foo = 0 ? 'foo' : 'bar'		'no-constant-condition': [			'error', {checkLoops: false}		],				// 禁止在正则表达式中使用控制字符		'no-control-regex': 'error',				// 禁止使用 debugger		'no-debugger': 'warn',				// 禁止在函数参数中出现重复名称的参数		'no-dupe-args': 'error',				// 禁止在对象字面量中出现重复名称的键名		'no-dupe-keys': 'error',				// 禁止出现重复的 case 标签		'no-duplicate-case': 'error',				// 禁止出现空语句块		'no-empty': [			'error', {allowEmptyCatch: false}		],		// 禁止在正则表达式中使用空的字符集 []		'no-empty-character-class': 'error',				// 禁止将 catch 的第一个参数 error 重新赋值		'no-ex-assign': 'error',				// 禁止不必要的布尔转换		'no-extra-boolean-cast': 'error',				//  禁止出现多余的括号，比如 (a * b) + c		// @off 多余的括号可以使代码更清晰		'no-extra-parens': 'off',				//  禁止不必要的分号		'no-extra-semi': 'error',				// 禁止将一个函数申明重新赋值，如：		'no-func-assign': 'error',				// 禁止在 if 内出现函数申明或使用 var 定义变量		'no-inner-declarations': [			'error',			'both'		],				// 禁止出现非法的正则表达式		'no-invalid-regexp': 'error',				// 禁止使用特殊空白符（比如全角空格），除非是出现在字符串、正则表达式或模版字符串中		'no-irregular-whitespace': [			'error',			{				skipStrings: true,				skipComments: false,				skipRegExps: true,				skipTemplates: true			}		],				// 禁止将 Math, JSON 或 Reflect 直接作为函数调用，必须作为类使用		'no-obj-calls': 'error',				// 禁止使用 hasOwnProperty, isPrototypeOf 或 propertyIsEnumerable		// @off 很多地方会用到 hasOwnProperty		'no-prototype-builtins': 'off',				//  禁止在正则表达式中出现连续的空格，必须使用 /foo {3}bar/ 代替		'no-regex-spaces': 'error',				// 禁止在数组中出现连续的逗号，如 let foo = [,,]		'no-sparse-arrays': 'error',				// 禁止在普通字符串中出现模版字符串的变量形式，如 'Hello ${name}!'		'no-template-curly-in-string': 'error',				// 禁止出现难以理解的多行表达式，如：		// let x = function () {}		// `hello`		'no-unexpected-multiline': 'error',				// 禁止在 return, throw, break 或 continue 之后还有代码		'no-unreachable': 'error',				// 禁止在 finally 中出现 return, throw, break 或 continue		'no-unsafe-finally': 'error',				//  禁止在 in 或 instanceof 操作符的左侧使用感叹号，如 if (!key in object)		'no-unsafe-negation': 'error',				// 必须使用 isNaN(foo) 而不是 foo === NaN		'use-isnan': 'error',				// 注释必须符合 jsdoc 的规范		// @off jsdoc 要求太严格		'valid-jsdoc': 'off',				// typeof 表达式比较的对象必须是 'undefined', 'object', 'boolean', 'number',		// 'string', 'function' 或 'symbol'		'valid-typeof': ['error', {'requireStringLiterals': true}]	}};